" Rahul Mahajan
" vimrc and plugins

scriptencoding utf-8
set encoding=utf-8

set nocompatible              " be iMproved, required
filetype off                  " required to use plugins, will turn on after plugins are initialized


call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'gerw/vim-HiLinkTrace'
Plug 'vim-scripts/visSum.vim'
Plug 'will133/vim-dirdiff'
Plug 'mhinz/vim-signify'
Plug 'scrooloose/syntastic'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
"Plug 'vim-latex/vim-latex'
"Plug 'ryanoasis/vim-devicons' "Needs special fonts from ; Must always be the last one

call plug#end()


filetype plugin indent on


syntax on
set background=dark
set cursorline
set t_Co=256
colorscheme xoria256
if has("gui_running")
    set guifont=Monaco:h15
    set lines=80
    set columns=100
endif

if version >= 703
    set colorcolumn=80
    highlight ColorColumn ctermbg=235 guibg=#2c2d27
    let &colorcolumn="80,".join(range(132,999),",")
    "call matchadd('ColorColumn', '\%81v', 100)
endif

" vim-better-whitespace'
highlight ExtraWhitespace ctermbg=red guibg=red

" vim-airline
set laststatus=2 " always show the last status of the file
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep='>'
let g:airline#extensions#tabline#left_alt_sep='<'
let g:airline_detect_modified=1
let g:airline_symbols_ascii=1
"let g:airline_powerline_fonts = 1 " needs powerline fonts patch
"let g:airline#extensions#tabline#show_buffers = 1

" vim-airline-themes
let g:airline_theme = 'wombat'

" vim-signify
let g:signify_vcs_list = [ 'git', 'svn' ]
let g:signify_disable_by_default = 1
nnoremap <leader>gt :SignifyToggle<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" vim-gitgutter
set updatetime=250
let g:gitgutter_max_signs = 1000
" No mapping
let g:gitgutter_map_keys = 0
" Colors
let g:gitgutter_override_sign_column_highlight = 0
highlight clear SignColumn
highlight GitGutterAdd          guifg=#00ff00 ctermfg=46
highlight GitGutterChange       guifg=#ffff00 ctermfg=11
highlight GitGutterDelete       guifg=#ff0000 ctermfg=9
highlight GitGutterChangeDelete guifg=#00ffff ctermfg=14

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_sh_shellcheck_args = "-x -e 2086,1090,1091,2126"
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E101,E111,E112,E113,E114,E115,E116,E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E133,E201,E202,E203,E211,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E261,E262,E265,E266,E271,E272,E273,E274,E301,E302,E303,E304,E401,E402,E501,E502,E701,E702,E703,E704,E711,E712,E713,E714,E721,E731,E901,E902,W191,W291,W292,W293,W391,W503,W601,W602,W603,W604'

" vim-supertab
let g:SuperTabDefaultCompletionType = "<c-p>"

" auto-pairs
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<M-b>'

"mouse visual block (ala MS Word) must :set mouse=a
nmap <C-LeftMouse> <LeftMouse><C-V>
vmap <C-LeftDrag>  <LeftDrag>
imap <C-LeftMouse> <LeftMouse><C-O><C-V>
vmap <C-LeftMouse> <Esc><LeftMouse><C-V>


set tabstop=4       " no. of spaces jumped upon tab , default 8 (ts)
set shiftwidth=4    " no. of spaces to use for each step of indent, default 8 (sw)
set softtabstop=4   " no. of spaces that a tab counts (sts)
set smarttab        " on tab, inserts blanks equal to shiftwidth(sta)
set expandtab       " expand the tab to appropriate no. of spaces (et)

set cindent         " follow C indenting rules (cin)
set autoindent      " use current lines indent level to next line (ai)
set smartindent     " intelligent guess of the new line indent    (si)
set paste           " put vim in paste mode so we can copy and paste between windows

set magic           " special characters, always keep on
set title           " set title of window to filename
set noinsertmode    " makes the insert mode as NOT the default mode (noim)

set backspace=indent,eol,start  " Allows you to backspace over the listed character types
set whichwrap=bs    " allow <BS>/<SPACE> keys to move to previous/next lines at start/end of line(ww)
set wrapmargin=2    " no. of characters from right margin before wrapping starts (wm)
set wrap            " when text is longer than the width of window, text will wrap to next line
set linebreak       " break at the character that extends the width and not at the last character (lbr)

" Toggle line wrapping in normal mode:
nmap <silent><leader>w :set nowrap!<cr>:set nowrap?<cr>

set so=7            " set 7 lines to the cursor - when moving vertically

set hlsearch        " highlight searches (hls)
set incsearch       " incremental search (is)
set ignorecase      " ignore case on searching (ic)
set smartcase       " acts smart about cases (scs)
set showmatch       " When a bracket is inserted, briefly jump to the matching one
set mat=3           " How many tenths of a second to blink when matching brackets
set updatetime=100  " update every 100ms (default is 4000ms); good for git-gutter

"set listchars=tab:>-,extends:»,precedes:«,trail:•
set listchars=tab:▸\ ,extends:»,precedes:«,trail:•,eol:¬,nbsp:_
set nolist " list mode
nmap <leader>l :set list!<CR>
"let &showbreak=''

" edit compressed files
augroup gzip
    autocmd!
    autocmd BufReadPre,FileReadPre     *.gz set bin
    autocmd BufReadPost,FileReadPost   *.gz '[,']!gunzip
    autocmd BufReadPost,FileReadPost   *.gz set nobin
    autocmd BufReadPost,FileReadPost   *.gz execute ":doautocmd BufReadPost " . expand("%:r")
    autocmd BufWritePost,FileWritePost *.gz !mv <afile> <afile>:r
    autocmd BufWritePost,FileWritePost *.gz !gzip <afile>:r
    autocmd FileAppendPre              *.gz !gunzip <afile>
    autocmd FileAppendPre              *.gz !mv <afile>:r <afile>
    autocmd FileAppendPost             *.gz !mv <afile> <afile>:r
    autocmd FileAppendPost             *.gz !gzip <afile>:r
augroup END

" perl programs
autocmd BufEnter *.pl set syntax=perl
autocmd BufEnter *.pl set ai si cin formatoptions=croql
autocmd BufLeave *.pl set nosi nocin formatoptions=tcq
autocmd BufEnter *.pl set comments=b:#
autocmd BufLeave *.pl set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-

" python programs
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
autocmd BufEnter *.py,*.psp set syntax=python
autocmd BufRead  *.py,*.psp set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead  *.py,*.psp inoremap # X#
autocmd BufRead  *.py,*.psp set tabstop=4
autocmd BufRead  *.py,*.psp set shiftwidth=4
autocmd BufRead  *.py,*.psp set softtabstop=4

" fortran programs
autocmd BufRead *.f*,*.F* let fortran_have_tabs=1
autocmd BufRead *.f*,*.F* let fortran_free_source=1
autocmd BufRead *.f*,*.F* let fortran_do_enddo=1
autocmd BufRead *.f*,*.F* let fortran_fold=0

" c programs and header files
"autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r set formatoptions=crql
"autocmd BufLeave *.l,*.y,*.c,*.cc,*.h,*.r set formatoptions=tcq
"autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://
"autocmd BufLeave *.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-
"autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F1> :!man <cword><CR><CR>
"autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F2> mpI/* <ESC>A */<ESC>`pj
"autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F3> mp^3x$xxx`pj
"autocmd BufEnter *.l,*.y,?akefile*,*.c,*.cc,*.h,*.r map <F4> :!ctags -t *.{c,C,cc,h}<CR>
"autocmd BufLeave *.l,*.y,*.c,*.cc,*.h,*.r unmap <F1>
"autocmd BufLeave *.l,*.y,*.c,*.cc,*.h,*.r unmap <F2>
"autocmd BufLeave *.l,*.y,*.c,*.cc,*.h,*.r unmap <F3>
"autocmd BufLeave *.l,*.y,?akefile*,*.c,*.cc,*.h,*.r unmap <F4>

" tex & latex source files
autocmd BufEnter *.tex map <F1> {\
autocmd BufEnter *.tex map <F2> }
autocmd BufEnter *.tex map <F3> {\bf
autocmd BufEnter *.tex map <F4> {\it
autocmd BufEnter *.tex map <leader>ll :!latexmk<cr>

" html source files
autocmd BufEnter *.htm* map <F1> <\
autocmd BufEnter *.htm* map <F2> >

"set foldmethod=syntax " folding for current window (fdm)
"set nofoldenable      " dont fold by default (nofen)
" Help on folding:
" To open folds use zR (all) and zr (level by level)
" To close folds use zM (all) and zm (level by level)

" Toggle between line numbers and relative line numbers
set number
nnoremap <silent><leader>nu :exe "set " . (&nu == 1 ? "nonu" : "nu")<cr>
nnoremap <silent><leader>n :exe "set " . (&rnu == 1 ? "nornu" : "rnu")<cr>

set dictionary=/usr/bin/dict/ " specify the location of dictionary directory (dict)
set complete+=k               " keyword completion on CTRL-P or CTRL-N (cpt)

set ruler           " bottom line showing location of cursor (ru)
set cmdheight=2     " set command bar height
set showmode        " shows the mode one is in. INSERT or REPLACE (smd)
set novisualbell    " turn off visual bell (novb)
set noerrorbells    " turn off error bell or beep (noeb)

map <F5> :!make

" key mappings
"map 1 :1
map q :q!
map  :w
map $ :$
map + :se nu<CR>
map _ :se nonu<CR>
map <C-BS> X


nnoremap <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" expand tab and retab in one go
nnoremap <leader>rt :set expandtab \| :retab<CR>

" language and spell check
nnoremap <silent> <leader>s :set spell!<CR>
let $LANG='en_us'
set langmenu=en_us
set spelllang=en_us

set wildmode=list:full " completion mode used with character specified with wildchar (wim)
set wildchar=<TAB>     " character to type to start wildcard expansion in command line (wc)
set wildmenu           " enable completion upon <Tab> (wmnu)
set wildignore=*.o,*.mod,*~,*.pyc " ignore filetypes
set wildignore+=.git\*,.hg\*,.svn\* " also ignore version control files

" maps to open and source vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" expand tab and retab in one go
nnoremap <leader>rt :set expandtab \| :retab<CR>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv
vnoremap . .gv

set ttyfast " indicates a fast terminal connection, helps with copy paste (tf)

" NERDtree
map <C-n> :NERDTreeToggle<CR>
"autocmd vimenter * NERDTree " open NERDTree on vim start-up
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" vim-better-whitespace'
autocmd FileType python,fortran,c,cpp,bash,ksh,csh,tcsh autocmd BufEnter <buffer> EnableStripWhitespaceOnSave
"autocmd BufEnter *.py,*.psp EnableStripWhitespaceOnSave
"autocmd BufEnter *.f*,*.F* EnableStripWhitespaceOnSave
"autocmd BufEnter *.*sh EnableStripWhitespaceOnSave

" Make VIM remember position in file after reopen
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

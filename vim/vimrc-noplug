" Rahul Mahajan
" vimrc

scriptencoding utf-8
set encoding=utf-8

set nocompatible    " be iMproved
filetype indent on

syntax on           " turn syntax highlighting on

set background=dark
set cursorline
set t_Co=256
"colorscheme xoria256
if has("gui_running")
    if has("unix")
        set guifont=Monospace\ 11
    endif
    if has("macunix")
        set guifont=Monaco:h15
    endif
    set lines=80
    set columns=100
endif

if version >= 703
    set colorcolumn=80
    highlight ColorColumn ctermbg=235 guibg=#2c2d27
    let &colorcolumn="80,".join(range(132,999),",")
    "call matchadd('ColorColumn', '\%81v', 100)
endif

set laststatus=2 " always show the last status of the file

set tabstop=2       " no. of spaces jumped upon tab , default 8 (ts)
set shiftwidth=2    " no. of spaces to use for each step of indent, default 8 (sw)
set shiftround      " round indent to multiple of shiftwidth (sr)
set softtabstop=2   " no. of spaces that a tab counts (sts)
set smarttab        " on tab, inserts blanks equal to shiftwidth(sta)
set expandtab       " expand the tab to appropriate no. of spaces (et)

set cindent         " follow C indenting rules (cin)
set autoindent      " use current lines indent level to next line (ai)
set smartindent     " intelligent guess of the new line indent    (si)
set paste           " put vim in paste mode so we can copy and paste between windows

set magic           " special characters, always keep on
set title           " set title of window to filename
set noinsertmode    " makes the insert mode as NOT the default mode (noim)

set backspace=indent,eol,start  " Allows you to backspace over the listed character types
set linebreak       " break at the character that extends the width and not at the last character (lbr)

" Line wrapping configurations
set whichwrap=bs    " allow <BS>/<SPACE> keys to move to previous/next lines at start/end of line(ww)
set wrapmargin=2    " no. of characters from right margin before wrapping starts (wm)
set wrap            " when text is longer than the width of window, text will wrap to next line
" Toggle line wrapping in normal mode:
nmap <silent><leader>w :set nowrap!<cr>:set nowrap?<cr>

set so=7            " set 7 lines to the cursor - when moving vertically
set showcmd         " display incomplete commands
set showmatch       " When a bracket is inserted, briefly jump to the matching one
set mat=3           " How many tenths of a second to blink when matching brackets
set updatetime=100  " update every 100ms (default is 4000ms); good for git-gutter

"set listchars=tab:>-,extends:Â»,precedes:Â«,trail:â€¢
set listchars=tab:â–¸\ ,extends:Â»,precedes:Â«,trail:â€¢,eol:Â¬,nbsp:_
"set list listchars=tab:Â»Â·,trail:Â·,nbsp:Â· " display extra whitespace
set nolist " list mode
nmap <leader>l :set list!<CR>
"let &showbreak=''

" Statusline configurations
set statusline=\ %f       " Path to the file
set statusline+=\ %m      " Modified flag
set statusline+=\ %y      " Filetype
set statusline+=%=        " Switch to the right side
set statusline+=%l        " current line
set statusline+=/%L       " Total lines

" Search / Substitute related configurations
set hlsearch        " highlight searches (hls)
set incsearch       " incremental search (is)
set ignorecase      " ignore case on searching (ic)
set smartcase       " acts smart about cases (scs)
nnoremap <leader>sub :%s///g<left><left>
vnoremap <leader>sub :s///g<left><left>

" Folding configurations
" ======================
"set foldmethod=syntax " folding for current window (fdm)
"set nofoldenable      " dont fold by default (nofen)
"set foldlevel=999
" Help on folding:
" To open folds use zR (all) and zr (level by level)
" To close folds use zM (all) and zm (level by level)

" Numbering configurations
" ========================
" Display relative line numbers, with absolute line number for current line
set number
set numberwidth=5
set relativenumber
" Toggle between line numbers and relative line numbers
nnoremap <silent><leader>nu :exe "set " . (&nu == 1 ? "nonu" : "nu")<cr>
nnoremap <silent><leader>n :exe "set " . (&rnu == 1 ? "nornu" : "rnu")<cr>
map + :se nu<CR>
map _ :se nonu<CR>

" language and spell check
" ========================
nnoremap <silent> <leader>s :set spell!<CR>
let $LANG='en_us'
set dictionary=/usr/bin/dict/ " specify the location of dictionary directory (dict)
set langmenu=en_us
set spelllang=en_us

set complete+=k               " keyword completion on CTRL-P or CTRL-N (cpt)

set ruler           " bottom line showing location of cursor (ru)
set cmdheight=2     " set command bar height
set showmode        " shows the mode one is in. INSERT or REPLACE (smd)
set noeb vb t_vb=   " turn off beeping when in NORMAL mode
set novisualbell    " turn off visual bell (novb)
set noerrorbells    " turn off error bell or beep (noeb)

set ttyfast " indicates a fast terminal connection, helps with copy paste (tf)

set wildmode=list:full " completion mode used with character specified with wildchar (wim)
set wildchar=<TAB>     " character to type to start wildcard expansion in command line (wc)
set wildmenu           " enable completion upon <Tab> (wmnu)
set wildignore=*.o,*.mod,*~,*.pyc   " ignore filetypes
set wildignore+=.git\*,.hg\*,.svn\* " also ignore version control files

" ========
" MAPPINGS
" ========
"
"mouse visual block (ala MS Word) must :set mouse=a
nmap <C-LeftMouse> <LeftMouse><C-V>
vmap <C-LeftDrag>  <LeftDrag>
imap <C-LeftMouse> <LeftMouse><C-O><C-V>
vmap <C-LeftMouse> <Esc><LeftMouse><C-V>

" edit compressed files
" key mappings
"map 1 :1
map q :q!
map  :w
map $ :$
map <C-BS> X

nnoremap <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" put one word per line
nnoremap <leader>sl :%s/\s\+/\r/g <CR>

" expand tab and retab in one go
nnoremap <leader>rt :set expandtab \| :retab<CR>

" maps to open and source vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv
vnoremap . .gv

" =========
" GROUPINGS
" =========

augroup gzip
    autocmd!
    autocmd BufReadPre,FileReadPre     *.gz set bin
    autocmd BufReadPost,FileReadPost   *.gz '[,']!gunzip
    autocmd BufReadPost,FileReadPost   *.gz set nobin
    autocmd BufReadPost,FileReadPost   *.gz execute ":doautocmd BufReadPost " . expand("%:r")
    autocmd BufWritePost,FileWritePost *.gz !mv <afile> <afile>:r
    autocmd BufWritePost,FileWritePost *.gz !gzip <afile>:r
    autocmd FileAppendPre              *.gz !gunzip <afile>
    autocmd FileAppendPre              *.gz !mv <afile>:r <afile>
    autocmd FileAppendPost             *.gz !mv <afile> <afile>:r
    autocmd FileAppendPost             *.gz !gzip <afile>:r
augroup END

" perl programs
autocmd BufEnter *.pl set syntax=perl
autocmd BufEnter *.pl set ai si cin formatoptions=croql
autocmd BufLeave *.pl set nosi nocin formatoptions=tcq
autocmd BufEnter *.pl set comments=b:#
autocmd BufLeave *.pl set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-

" python programs
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
autocmd BufEnter *.py,*.psp set syntax=python
autocmd BufRead  *.py,*.psp set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead  *.py,*.psp inoremap # X#
autocmd BufRead  *.py,*.psp set tabstop=4
autocmd BufRead  *.py,*.psp set shiftwidth=4
autocmd BufRead  *.py,*.psp set softtabstop=4

" fortran programs
autocmd BufRead *.f*,*.F* let fortran_have_tabs=1
autocmd BufRead *.f*,*.F* let fortran_free_source=1
autocmd BufRead *.f*,*.F* let fortran_do_enddo=1
autocmd BufRead *.f*,*.F* let fortran_fold=0

" tex & latex source files
autocmd BufEnter *.tex map <F1> {\
autocmd BufEnter *.tex map <F2> }
autocmd BufEnter *.tex map <F3> {\bf
autocmd BufEnter *.tex map <F4> {\it
autocmd BufEnter *.tex map <leader>ll :!latexmk<cr>

" Make VIM remember position in file after reopen
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Not in vimrc

"set cpoptions=ces$  " compatible options (cpo)
"set shortmess=at    " avoid all |hit-enter| prompts caused by file messages (shm)
"
"set splitright      " when on splitting, put window on right (spr)
"
"set nobackup        " does not create backup each time a file is created/edited (nobk)
"
"set mouse=a         " enable the use of mouse
"
"set joinspaces      " Insert 2 spaces after a '.', '?', '!'. Otherwise 1 space (js)
"
"set report=0        " threshold for reporting no of lines changed
"set nomodeline      " (noml)
"
"set shell=/bin/bash " name of shell to use for '!' commands (sh)
"
"set linespace=1     " no. of pixel lines between characters (lsp)
"set textwidth=100   " maximum width of text to be inserted (tw)
"set autowrite       " write contents of the file, if modified (aw)
"set helpheight=10   " minimal height of the help window, when :help is invoked (hh)
"
"set printdevice=motley " Set default printer destination (pdev)
"
"set clipboard+=unnamed
"
"if has("terminfo")
"    set t_Co=8
"    set t_Sf=[3%p1%dm
"    set t_Sb=[4%p1%dm
"else
"    set t_Co=8
"    set t_Sf=[3%dm
"    set t_Sb=[4%dm
"endif
